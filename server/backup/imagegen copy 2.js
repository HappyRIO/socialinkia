const fetch = require("node-fetch");
const dotenv = require("dotenv");
const { createCanvas } = require("canvas");
const fs = require("fs");

// Load environment variables
dotenv.config({ path: "../.env" });

const CHATGPT_API_URL = "https://api.openai.com/v1/chat/completions";
const CHATGPT_API_KEY = process.env.GPT_API_KEY;

// Function to generate an image with a custom background
async function generateImage(prompt, outputFilePath) {
  const width = 800; // Image width
  const height = 630; // Image height
  const canvas = createCanvas(width, height);
  const ctx = canvas.getContext("2d");

  // Step 1: Generate a random background
  const backgroundStyles = ["solid", "stripes", "shapes", "gradient"];
  const selectedStyle =
    backgroundStyles[Math.floor(Math.random() * backgroundStyles.length)];

  if (selectedStyle === "solid") {
    // Solid background color
    ctx.fillStyle = `hsl(${Math.random() * 360}, 70%, 50%)`;
    ctx.fillRect(0, 0, width, height);
  } else if (selectedStyle === "stripes") {
    // Striped background
    ctx.fillStyle = "#000";
    ctx.fillRect(0, 0, width, height);
    for (let i = 0; i < 10; i++) {
      ctx.fillStyle = `hsl(${Math.random() * 360}, 70%, 80%)`;
      ctx.fillRect(i * 80, 0, 40, height);
    }
  } else if (selectedStyle === "shapes") {
    // Shapes background
    ctx.fillStyle = `hsl(${Math.random() * 360}, 70%, 50%)`;
    ctx.fillRect(0, 0, width, height);
    for (let i = 0; i < 20; i++) {
      ctx.fillStyle = `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${
        Math.random() * 255
      }, 0.6)`;
      ctx.beginPath();
      ctx.arc(
        Math.random() * width,
        Math.random() * height,
        Math.random() * 50 + 10,
        0,
        Math.PI * 2
      );
      ctx.fill();
    }
  } else if (selectedStyle === "gradient") {
    // Gradient background
    const gradient = ctx.createLinearGradient(0, 0, width, height);
    gradient.addColorStop(0, `hsl(${Math.random() * 360}, 70%, 50%)`);
    gradient.addColorStop(1, `hsl(${Math.random() * 360}, 70%, 70%)`);
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, width, height);
  }

  // Step 2: Add the text
  ctx.fillStyle = "#fff";
  ctx.font = "bold 48px Arial";
  ctx.textAlign = "center";
  ctx.textBaseline = "middle";

  // Text wrapping
  const wrapText = (context, text, x, y, maxWidth, lineHeight) => {
    const words = text.split(" ");
    let line = "";
    for (let n = 0; n < words.length; n++) {
      const testLine = line + words[n] + " ";
      const metrics = context.measureText(testLine);
      const testWidth = metrics.width;
      if (testWidth > maxWidth && n > 0) {
        context.fillText(line, x, y);
        line = words[n] + " ";
        y += lineHeight;
      } else {
        line = testLine;
      }
    }
    context.fillText(line, x, y);
  };

  const maxWidth = width - 100; // Padding
  const lineHeight = 60;
  const textX = width / 2;
  const textY = height / 2 - 30;

  wrapText(ctx, prompt, textX, textY, maxWidth, lineHeight);

  // Step 3: Add branding text
  ctx.font = "italic 24px Arial";
  ctx.fillStyle = "#ddd";
  ctx.textAlign = "right";
  ctx.fillText("Generated by YourApp", width - 20, height - 40);

  // Step 4: Save the image
  const buffer = canvas.toBuffer("image/png");
  fs.writeFileSync(outputFilePath, buffer);
  console.log(`Image saved to ${outputFilePath}`);
}

async function generatePost() {
  const companyDetails = {
    userName: "meta tech",
    logo: "https://res.cloudinary.com/dqmqbpaez/image/upload/v1735392905/automedia/uwwtaj6trmv4yij5q6bu.jpg",
    companyTradeName: "metro tech",
    businessSector: "IT Services",
    communication_style: "joke",
    communication_style_other: "geek, IT humor, sass jokes"
  };

  const response = await fetch(CHATGPT_API_URL, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${CHATGPT_API_KEY}`
    },
    body: JSON.stringify({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: `You are the social media manager for ${companyDetails.companyTradeName}. Create a post for their social media with the following details:`
        },
        {
          role: "user",
          content: `Create a ${companyDetails.communication_style}, super short and customer-centric post content of max 20 words for 
          Name: ${companyDetails.companyTradeName}
          Sector: ${companyDetails.businessSector}`
        }
      ]
    })
  });

  const rawData = await response.json();
  let messageContent = rawData.choices[0].message.content;

  if (messageContent.startsWith('"') && messageContent.endsWith('"')) {
    messageContent = messageContent.slice(1, -1);
  }

  console.log({ messageContent });

  // Generate the image
  const outputFilePath = "./socialMediaPost.png";
  await generateImage(messageContent, outputFilePath);

  return messageContent;
}

generatePost().catch(console.error);
