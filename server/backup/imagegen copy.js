const fetch = require("node-fetch");
const dotenv = require("dotenv");
const { createCanvas } = require("canvas");
const fs = require("fs");

// Load environment variables
dotenv.config({ path: "../.env" });

const CHATGPT_API_URL = "https://api.openai.com/v1/chat/completions";
const CHATGPT_API_KEY = process.env.GPT_API_KEY;

// Function to generate an image based on the prompt
async function generateImage(prompt, outputFilePath) {
  //   const width = 1200; // Image width
  const width = 800; // Image width
  const height = 630; // Image height
  const canvas = createCanvas(width, height);
  const ctx = canvas.getContext("2d");

  // Background color
  ctx.fillStyle = "#f4f4f4";
  ctx.fillRect(0, 0, width, height);

  // Border
  ctx.strokeStyle = "#333";
  ctx.lineWidth = 10;
  ctx.strokeRect(0, 0, width, height);

  // Text styling
  ctx.fillStyle = "#333";
  ctx.font = "bold 48px Arial";
  ctx.textAlign = "center";
  ctx.textBaseline = "middle";

  // Split text into multiple lines if it exceeds width
  const wrapText = (context, text, x, y, maxWidth, lineHeight) => {
    const words = text.split(" ");
    let line = "";
    for (let n = 0; n < words.length; n++) {
      const testLine = line + words[n] + " ";
      const metrics = context.measureText(testLine);
      const testWidth = metrics.width;
      if (testWidth > maxWidth && n > 0) {
        context.fillText(line, x, y);
        line = words[n] + " ";
        y += lineHeight;
      } else {
        line = testLine;
      }
    }
    context.fillText(line, x, y);
  };

  const maxWidth = width - 100; // Padding
  const lineHeight = 60;
  const textX = width / 2;
  const textY = height / 2 - 30;

  wrapText(ctx, prompt, textX, textY, maxWidth, lineHeight);

  // Add branding
  ctx.font = "italic 24px Arial";
  ctx.fillStyle = "#555";
  ctx.textAlign = "right";
  //   ctx.fillText("Generated by YourApp", width - 20, height - 40);

  // Save image
  const buffer = canvas.toBuffer("image/png");
  fs.writeFileSync(outputFilePath, buffer);
  console.log(`Image saved to ${outputFilePath}`);
}

async function generatePost() {
  const companyDetails = {
    userName: "meta tech",
    logo: "https://res.cloudinary.com/dqmqbpaez/image/upload/v1735392905/automedia/uwwtaj6trmv4yij5q6bu.jpg",
    companyTradeName: "metro tech",
    businessSector: "IT Services",
    addressVisible: "NO",
    country: "",
    province: "",
    locality: "",
    postalCode: "",
    webPage: "YES",
    webPageUrl: "http://chidavid.netlify.app/",
    showContactInfo: "NO",
    contactInfo: "",
    photos: [
      "https://res.cloudinary.com/dqmqbpaez/image/upload/v1735392901/automedia/snbioawarrpxvxmqfzqx.jpg",
      "https://res.cloudinary.com/dqmqbpaez/image/upload/v1735392902/automedia/vrm1etxvmrs0zn4kjx4u.jpg",
      "https://res.cloudinary.com/dqmqbpaez/image/upload/v1735392903/automedia/z9nxwmdgv6xik5ifluva.jpg",
      "https://res.cloudinary.com/dqmqbpaez/image/upload/v1735392904/automedia/q8dqjgjfnqo2pbdybgk9.jpg"
    ],
    communication_style: "joke",
    communication_style_other: "geek, IT humor, sass jokes"
  };

  const response = await fetch(CHATGPT_API_URL, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${CHATGPT_API_KEY}`
    },
    body: JSON.stringify({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: `You are the social media manager for ${companyDetails.companyTradeName}. Create a post for their social media with the following details:`
        },
        {
          role: "user",
          content: `Create a ${companyDetails.communication_style}, super short and customer-centric post content of max 20 words for 
          Name: ${companyDetails.companyTradeName}
          Sector: ${companyDetails.businessSector}`
        }
      ]
    })
  });

  const rawData = await response.json();
  let messageContent = rawData.choices[0].message.content;

  if (messageContent.startsWith('"') && messageContent.endsWith('"')) {
    messageContent = messageContent.slice(1, -1);
  }

  console.log({ messageContent });

  // Generate the image
  const outputFilePath = "./socialMediaPost.png";
  await generateImage(messageContent, outputFilePath);

  return messageContent;
}

generatePost().catch(console.error);
