const { createCanvas, loadImage } = require("canvas");
const fs = require("fs");

// Function to generate an image based on the given prompt
async function generateImage(prompt, outputFilePath) {
  const width = 1200; // Width of the image
  const height = 630; // Height of the image
  const canvas = createCanvas(width, height);
  const ctx = canvas.getContext("2d");

  // Background color
  ctx.fillStyle = "#f4f4f4"; // Light gray background
  ctx.fillRect(0, 0, width, height);

  // Add a border
  ctx.strokeStyle = "#333";
  ctx.lineWidth = 10;
  ctx.strokeRect(0, 0, width, height);

  // Title text styling
  ctx.fillStyle = "#333"; // Dark text color
  ctx.font = "bold 48px Arial";
  ctx.textAlign = "center";
  ctx.textBaseline = "top";

  // Wrap text if it exceeds the width
  const wrapText = (context, text, x, y, maxWidth, lineHeight) => {
    const words = text.split(" ");
    let line = "";
    for (let n = 0; n < words.length; n++) {
      const testLine = line + words[n] + " ";
      const metrics = context.measureText(testLine);
      const testWidth = metrics.width;
      if (testWidth > maxWidth && n > 0) {
        context.fillText(line, x, y);
        line = words[n] + " ";
        y += lineHeight;
      } else {
        line = testLine;
      }
    }
    context.fillText(line, x, y);
  };

  const textX = width / 2;
  const textY = 150;
  const maxWidth = width - 100; // Leave some padding
  const lineHeight = 60;

  // Draw the prompt text
  wrapText(ctx, prompt, textX, textY, maxWidth, lineHeight);

  // Add a footer or branding
  ctx.font = "italic 24px Arial";
  ctx.fillStyle = "#555"; // Subtle text color
  ctx.textAlign = "right";
  ctx.fillText("Generated by YourApp", width - 20, height - 40);

  // Save the image to the file system
  const buffer = canvas.toBuffer("image/png");
  fs.writeFileSync(outputFilePath, buffer);
  console.log(`Image saved to ${outputFilePath}`);
}

// Example usage
const prompt =
  "Unlock the power of your creativity with Node.js! Build amazing tools like this image generator.";
const outputFilePath = "./outputImage.png";

generateImage(prompt, outputFilePath).catch((error) => {
  console.error("Error generating image:", error);
});
